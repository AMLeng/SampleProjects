#ifndef _DECAFGRAMMAR_
#define _DECAFGRAMMAR_
#include "grammar.h"
namespace decaf_grammar{
auto decaf_grammar = grammar::Grammar(std::map<std::string,std::vector<std::vector<std::string>>>{{
    {"Start",{{"Program"}}},
    {"Program",{{"Decl+"}}},
    {"Decl+",{{"Decl+","Decl"},{"Decl"}}},
    {"Decl",{{"VariableDecl"},{"FunctionDecl"},{"ClassDecl"},{"InterfaceDecl"}}},
    {"VariableDecl",{{"Variable",";"}}},
    {"Variable",{{"Type","Ident"}}},
    {"Type",{{"Int"},{"Bool"},{"Double"},{"String"},{"Ident"},{"Type","[","]"}}},
    {"FunctionDecl",{{"Type","Ident","(","Formals",")","StmtBlock"},{"void","Ident","(","Formals",")","StmtBlock"}}},
    {"Formals",{{},{"VariableList"}}},
    {"VariableList",{{"Variable"},{"Variable",",","VariableList"}}},
    {"ClassDecl",{{"class","Ident","{","Field*","}"},
                {"class","Ident","extends","Ident","{","Field*","}"},
                {"class","Ident","extends","Ident","implements","IdentList","{","Field*","}"},
                {"class","Ident","implements","IdentList","{","Field*","}"}}},
    {"IdentList",{{"Ident"},{"Ident",",","IdentList"}}},
    {"Field*",{{},{"Field","Field*"}}},
    {"Field",{{"VariableDecl"},{"FunctionDecl"}}},
    {"InterfaceDecl",{{"interface","Ident","{","Prototype*","}"}}},
    {"Prototype*",{{},{"Prototype","Prototype*"}}},
    {"Prototype",{{"Type","Ident","(","Formals",")",";"},{"void","Ident","(","Formals",")",";"}}},
    {"StmtBlock",{{"VariableDecl*", "Stmt*"}}},
    {"VariableDecl*",{{},{"VariableDecl","VariableDecl*"}}},
    {"Stmt*",{{},{"Stmt","Stmt*"}}},
    {"Stmt",{{";"},{"Expr",";"},{"IfStmt"},{"WhileStmt"},{"ForStmt"},{"BreakStmt"},{"ReturnStmt"},{"PrintStmt"},{"StmtBlock"}}},
    {"IfStmt",{{"if","(","Expr",")","Stmt","else","Stmt"},{"if","(","Expr",")","Stmt"}}},
    {"WhileStmt",{{"while","(","Expr",")","Stmt"}}},
    {"ForStmt",{{"for","(","Expr",";","Expr",";","Expr",")","Stmt"},
                {"for","(","Expr",";","Expr",";",")","Stmt"},
                {"for","(",";","Expr",";","Expr",")","Stmt"}}},
    {"ReturnStmt",{{"return",";"},{"return","Expr",";"}}},
    {"BreakStmt",{{"break",";"}}},
    {"PrintStmt",{{"Print","(","ExprList",")",";"}}},
    {"ExprList",{{"Expr"},{"Expr",",","ExprList"}}},
    {"Expr",{{"LValue","=","Expr"},
            {"Constant"},
            {"LVlue"},
            {"this"},
            {"Call"},
            {"(","Expr",")"},
            {"Expr","+","Expr"},
            {"Expr","=","Expr"},
            {"Expr","*","Expr"},
            {"Expr","/","Expr"},
            {"Expr","%","Expr"},
            {"-","Expr"},
            {"Expr","<","Expr"},
            {"Expr","<","=","Expr"},
            {"Expr",">","Expr"},
            {"Expr",">","=","Expr"},
            {"Expr","=","=","Expr"},
            {"Expr","!","=","Expr"},
            {"Expr","&","&","Expr"},
            {"Expr","|","|","Expr"},
            {"!","Expr"},
            {"ReadInteger","(",")"},
            {"ReadLine","(",")"},
            {"new","Ident"},
            {"NewArray","(","Expr",",","Type",")"}}},
    {"LValue",{{"Ident"},{"Expr",".","Ident"},{"Expr","[","Expr","]"}}},
    {"Call",{{"Ident","(","Actuals",")"},{"Expr",".","Ident","(","Actuals",")"}}},
    {"Actuals",{{},{"ExprList"}}},
    {"Constant",{{"IntConstant"},{"DoubleConstant"},{"StringConstant"},{"BoolConstant"},{"null"}}}
}});
}//namespace decaf_grammar
#endif //_DECAFGRAMMAR_
